# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=()

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# BEGIN USER CONFIGURATION

if [[ -e "$HOME/.profile" ]]; then
    . "$HOME/.profile"
fi

eval $(ssh-agent) > /dev/null 2>&1
find ~/.ssh -type f -name "*.pem" -o -name "*.key" -exec ssh-add {} > /dev/null 2>&1 \;

typeset -U path PATH # Make path dedupe values
path+=~/.local/nvim/bin
path+=~/.local/share/bob/nvim-bin
path+=~/.local/share/go/bin
path+=~/.npm-packages/bin
path+=~/.cargo/bin
path+=~/.local/bin
path+=~/Scripts
path+=~/.composer/vendor/bin
path+=/home/linuxbrew/.linuxbrew/bin
path+=~/.cargo/bin
path+=~/.local/bin
path+=~/Scripts

alias vi="nvim"
# Alias to enter generic tmux session
alias tenter="tmux new -As main"
alias deventer="distrobox-enter dev -- tmux -L dev new -As main 'exec zsh'"
# Hibernate alias
alias hibernate="systemctl hibernate"
# rm interactive mode alias
alias rm="rm -I"

# git aliases
alias gs="git status"
alias gsw="git switch -"
alias ga="git add"
alias gaa="git add ."
alias gc="git commit"
function gco() {
    if [[ -z "$1" ]]; then
        git checkout $(git branch | fzf)
    else
        git checkout $@
    fi
}
alias gb="git branch"
alias gd="git diff"
alias gp="git pull"
alias gf="git fetch"
alias gpu="git push"
alias gl="git log"
alias glo="git log --oneline"
alias glog="git log --oneline --graph"
alias gw="git worktree"
function r() {
    cd $(git rev-parse --show-toplevel)
}
function gwa() {
    if [[ -z "$1" ]]; then
        echo "Please provide a branch"
        return 1
    fi
    if git show-ref --verify --quiet refs/heads/$1; then
        echo "Branch exists"
        git worktree add $1 $1
    else
        echo "Branch doesn't exist"
        git worktree add -b $1 $1
    fi
}
function srcenv() {
    set -a; source .env; set +a
}

# eza aliases
eza_modifiers="--git --icons --color-scale --group-directories-first"
alias l="eza $eza_modifiers"
alias ls="eza $eza_modifiers -lhg"
alias ll="eza $eza_modifiers -lbhmag"
alias la="eza $eza_modifiers -a"
alias lt="eza $eza_modifiers --tree"
alias llt="eza $eza_modifiers --tree -a"
alias lx="eza $eza_modifiers -lbhHgmUa"

alias firefox="flatpak run org.mozilla.firefox"
alias protontricks="flatpak run com.github.Matoking.protontricks"
alias protontricks-launch="flatpak run --command=protontricks-launch com.github.Matoking.protontricks"

# Movement aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias ........="cd ../../../../../../.."
alias .........="cd ../../../../../../../.."
alias ..........="cd ../../../../../../../../.."
alias ...........="cd ../../../../../../../../../.."
alias ............="cd ../../../../../../../../../../.."
alias .............="cd ../../../../../../../../../../../.."
alias ..............="cd ../../../../../../../../../../../../.."
alias ...............="cd ../../../../../../../../../../../../../.."
alias ................="cd ../../../../../../../../../../../../../../.."

function r() {
    cd $(git rev-parse --show-toplevel)
}

function frun() {
    flatpak run (flatpak list --app | cut -f2 | fzf)
}

function tmp() {
    local tmp="/tmp/workspaces/$(xxd -l3 -ps /dev/urandom)"
    mkdir -p "$tmp"
    echo "$tmp"
    cd "$tmp"
}

function sd() {
    local dirr=$(find $argv | fzf-tmux -p 70%,75% --preview " [ -f {} ] && bat -f {} || eza -lah --color=always --tree {}")
    [ -d $dirr ] && cd $dirr && return
    [ -f $dirr ] && nvim $dirr && return
}

function pullall() {
    find "$HOME/Projects/" -maxdepth 3 -name -prune -o -type d -name .git -prune -print -exec git -C {}/.. pull \;
}

function showme() {
    if [[ -z "$@" ]]; then
        echo "Pass file to show"
        return 1
    fi
    local tmp="/tmp/workspaces/$(xxd -l3 -ps /dev/urandom)"
    mkdir -p "$tmp"
    7z x "$@" -o"$tmp"
    cd "$tmp" || return 1
    clear && l
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh

function before_init() {}
function after_init() {
    source <(fzf --zsh)
    eval "$(zoxide init zsh)"
    bindkey '\e;' autosuggest-accept
}

zvm_before_init_commands=(before_init)
zvm_after_init_commands=(after_init)
source "$ZSH_CUSTOM/plugins/zsh-vi-mode/zsh-vi-mode.zsh"

eval "$(direnv hook zsh)"
eval "$(starship init zsh)"

# MUST BE AT END
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
